name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scan
    - cron: '0 2 * * 1'

jobs:
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations
      with:
        config-path: .gitleaks.toml
    
    - name: Manual Secret Check
      run: |
        echo "🔍 Running additional secret checks..."
        
        # Check for .env files that are tracked by git (shouldn't happen)
        if git ls-files | grep -E "\.env$|\.env\.local$|\.env\.production$"; then
          echo "❌ .env files found in git index (should be gitignored)!"
          git ls-files | grep -E "\.env$|\.env\.local$|\.env\.production$"
          exit 1
        fi
        
        # Check for potential hardcoded secrets in tracked files only
        if git ls-files | xargs grep -l "WEBEX_PUBLIC_WORKSPACE_API_KEY.*=.*[a-zA-Z0-9]{30,}" 2>/dev/null; then
          echo "❌ Potential hardcoded Webex API key found in tracked files!"
          git ls-files | xargs grep -l "WEBEX_PUBLIC_WORKSPACE_API_KEY.*=.*[a-zA-Z0-9]{30,}" 2>/dev/null
          exit 1
        fi
        
        if git ls-files | xargs grep -l "sk-[a-zA-Z0-9-_]{40,}" 2>/dev/null; then
          echo "❌ Potential OpenAI API key found in tracked files!"
          git ls-files | xargs grep -l "sk-[a-zA-Z0-9-_]{40,}" 2>/dev/null
          exit 1
        fi
        
        echo "✅ No secrets found in tracked files"

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t webex-mcp-server:test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'webex-mcp-server:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
